//
//  IconsStyleKit.swift
//  Autocomplete
//
//  Created by Timothy P Miller on 4/28/15.
//  Copyright (c) 2015 Timothy P Miller. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

open class IconsStyleKit : NSObject {

    //// Cache

    fileprivate struct Cache {
        static var imageOfCanvas2: UIImage?
        static var canvas2Targets: [AnyObject]?
        static var imageOfCanvas4: UIImage?
        static var canvas4Targets: [AnyObject]?
    }

    //// Drawing Methods

    open class func drawCanvas2() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: 27.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 27.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 18.5))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 18.5))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 27.5))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 27.5))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 6.5))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 6.5))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 27.5))
        bezierPath.addLine(to: CGPoint(x: 20.5, y: 27.5))
        bezierPath.addLine(to: CGPoint(x: 20.5, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 24.5, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 24.5, y: 27.5))
        bezierPath.addLine(to: CGPoint(x: 27.5, y: 4.5))
        bezierPath.addLine(to: CGPoint(x: 29.5, y: 27.5))
        bezierPath.addLine(to: CGPoint(x: 34.5, y: 27.5))
        bezierPath.addLine(to: CGPoint(x: 34.5, y: 27.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    open class func drawCanvas4() {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0.5, y: 2.5))
        bezier2Path.addCurve(to: CGPoint(x: 33.5, y: 2.5), controlPoint1: CGPoint(x: 33.5, y: 2.5), controlPoint2: CGPoint(x: 33.5, y: 2.5))
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: 31.5))
        bezierPath.addCurve(to: CGPoint(x: 33.5, y: 31.5), controlPoint1: CGPoint(x: 33.5, y: 31.5), controlPoint2: CGPoint(x: 33.5, y: 31.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 15.5, y: 4.5, width: 18, height: 25))
        UIColor.black.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 20.5, y: 8.5, width: 8, height: 10))
        UIColor.black.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 21.93, y: 17.66))
        bezier3Path.addCurve(to: CGPoint(x: 16.79, y: 22.92), controlPoint1: CGPoint(x: 16.79, y: 22.92), controlPoint2: CGPoint(x: 16.79, y: 22.92))
        UIColor.black.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 28.36, y: 18.97))
        bezier4Path.addCurve(to: CGPoint(x: 30.93, y: 24.24), controlPoint1: CGPoint(x: 30.93, y: 24.24), controlPoint2: CGPoint(x: 30.93, y: 24.24))
        UIColor.black.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()




        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 5.5, y: 13.25))
        starPath.addLine(to: CGPoint(x: 7.35, y: 15.95))
        starPath.addLine(to: CGPoint(x: 10.49, y: 16.88))
        starPath.addLine(to: CGPoint(x: 8.5, y: 19.47))
        starPath.addLine(to: CGPoint(x: 8.59, y: 22.75))
        starPath.addLine(to: CGPoint(x: 5.5, y: 21.65))
        starPath.addLine(to: CGPoint(x: 2.41, y: 22.75))
        starPath.addLine(to: CGPoint(x: 2.5, y: 19.47))
        starPath.addLine(to: CGPoint(x: 0.51, y: 16.88))
        starPath.addLine(to: CGPoint(x: 3.65, y: 15.95))
        starPath.close()
        UIColor.black.setStroke()
        starPath.lineWidth = 1
        starPath.stroke()
    }

    //// Generated Images

    open class var imageOfCanvas2: UIImage {
        if Cache.imageOfCanvas2 != nil {
            return Cache.imageOfCanvas2!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 34, height: 34), false, 0)
            IconsStyleKit.drawCanvas2()

        Cache.imageOfCanvas2 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvas2!
    }

    open class var imageOfCanvas4: UIImage {
        if Cache.imageOfCanvas4 != nil {
            return Cache.imageOfCanvas4!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 34, height: 34), false, 0)
            IconsStyleKit.drawCanvas4()

        Cache.imageOfCanvas4 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvas4!
    }

    //// Customization Infrastructure

    @IBOutlet var canvas2Targets: [AnyObject]! {
        get { return Cache.canvas2Targets }
        set {
            Cache.canvas2Targets = newValue
            for target: AnyObject in newValue {
                target.setImage(IconsStyleKit.imageOfCanvas2)
            }
        }
    }

    @IBOutlet var canvas4Targets: [AnyObject]! {
        get { return Cache.canvas4Targets }
        set {
            Cache.canvas4Targets = newValue
            for target: AnyObject in newValue {
                target.setImage(IconsStyleKit.imageOfCanvas4)
            }
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(_ image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(_ image: UIImage!)
}
